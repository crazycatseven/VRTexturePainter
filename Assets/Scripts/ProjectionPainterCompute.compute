#pragma kernel CSMain

// _MainTex: Target texture (RWTexture2D) for painting
// _UVTex: UV mapping texture (Texture2D) used for sampling UV coordinates
RWTexture2D<float4> _MainTex;
Texture2D<float4> _UVTex;
Texture2D<float> _DepthTex;

SamplerState sampler_linear_clamp
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Clamp;
    AddressV = Clamp;
};

// Dimensions of the UV and main textures
int _UVTexWidth;
int _UVTexHeight;
int _MainTexWidth;
int _MainTexHeight;

// Brush parameters:
Texture2D<float4> _BrushTex;
int _HasBrushTex;
int _BrushTexWidth;
int _BrushTexHeight;
float _BrushSize;
float4 _BrushColor;
int _BrushCenterX;
int _BrushCenterY;

int2 _RegionStart;

int _DispatchSize;

// Use 16x16 threads per thread group to leverage GPU parallelism
[numthreads(16,16,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int x = id.x + _RegionStart.x;
    int y = id.y + _RegionStart.y;
    
    if (x >= _UVTexWidth || y >= _UVTexHeight)
        return;

    // Calculate the distance to the center of the brush
    float2 pixelToCenter = float2(x - _BrushCenterX, y - _BrushCenterY);
    float distanceToCenter = length(pixelToCenter);

    // Use a smooth circular falloff
    float brushRadius = _BrushSize * 0.5;
    if (distanceToCenter > brushRadius)
        return;

    float brushStrength;

    if (_HasBrushTex == 1)
    {
        float2 brushUV = float2(
            (x - (_BrushCenterX - brushRadius)) / _BrushSize,
            (y - (_BrushCenterY - brushRadius)) / _BrushSize
        );
        
        if (brushUV.x >= 0 && brushUV.x <= 1 && brushUV.y >= 0 && brushUV.y <= 1)
        {
            float4 brushSample = _BrushTex.SampleLevel(sampler_linear_clamp, brushUV, 0);
            brushStrength = brushSample.r * smoothstep(brushRadius, 0, distanceToCenter);
        }
        else
        {
            brushStrength = 0;
        }
    }
    else
    {
        brushStrength = smoothstep(brushRadius, 0, distanceToCenter);
    }

    float2 uv = _UVTex.Load(int3(x, y, 0)).rg;
    float2 mainTexCoord = uv * float2(_MainTexWidth, _MainTexHeight);
    int2 mainTexPos = int2(mainTexCoord);
    
    if (mainTexPos.x >= 0 && mainTexPos.x < _MainTexWidth && 
        mainTexPos.y >= 0 && mainTexPos.y < _MainTexHeight)
    {
        float4 originalColor = _MainTex[mainTexPos];
        float4 finalColor = lerp(originalColor, _BrushColor, brushStrength);
        _MainTex[mainTexPos] = finalColor;
    }
}